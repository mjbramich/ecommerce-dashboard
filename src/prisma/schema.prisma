// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


// PRIMARY KEYS - Field that uniquely identifies each record
// FOREIGN KEYS - Establish relationship between two tables

model Billboard {
  id        String @id @default(uuid()) // Primary Key
  label     String
  imageUrl  String
  collections Collection[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Collection {
  id        String @id @default(uuid()) // Primary Key
  billboardId String // FOREIGN KEY
  billboard Billboard @relation(fields: [billboardId], references: [id]) // FOREIGN KEY (BILLBOARDID) REFERENCES PRIMARY KEY (ID) OF BILLBOARD
  products  Product[] @relation("collectionToProduct")
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([billboardId]) // manually create Index
}

model Product {
  id        String @id @default(uuid()) // Primary Key
  collectionId String // FOREIGN KEY
  collection    Collection @relation("collectionToProduct", fields: [collectionId], references: [id])  // FOREIGN KEY (collectionID) REFERENCES PRIMARY KEY (ID) OF PRODUCT
  name      String
  price     Decimal
  size      String  // filters
  description String
  // team      String // filters 
  featured  Boolean @default(false)
  archived  Boolean @default(false)
  images     Image[]   // Need more than one image per product sometimes
  orderId   String @default("") // FOREIGN KEY
  order      Order @relation(fields: [orderId], references: [id], onDelete: Cascade) // Deleting the order also deletes all related products
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([collectionId])
  @@index([orderId])
}

model Image {
  id        String @id @default(uuid()) // Primary Key
  url       String
  productId String // FOREIGN KEY
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade) // Deleting the product also deletes all related image Records
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order {
  id         String @id @default(uuid()) // Primary Key
  orderItems Product[]
  isPaid     Boolean @default(false)
  name       String @default("")
  email      String @default("")
  phone      String @default("")
  address    String @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime  @updatedAt
}
